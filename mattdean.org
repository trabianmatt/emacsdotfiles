#+TITLE: Matt Dean's Emacs configuration
#+OPTIONS: toc:4 h:4

Note: Due to some unknown (to me) issue, org-mode needs to be reloaded
via =M-x org-reload= after starting Emacs

* TODO Document this a bit better -- was mostly copied/pasted from existing init.el

* Configuration
** About this configuration
   
   This configuration is inspired by the [[http://dl.dropboxusercontent.com/u/3968124/sacha-emacs.html#sec-1][Sacha Chua's literate config
   file]] and is partially an exploration into the idea of literate
   programming, particularly via org-mode.

** Emacs initialization

Load common package archives.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '())             ; Start fresh
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
  
  (when (not package-archive-contents)
    (package-refresh-contents))
#+END_SRC

*** Helper functions

The following function will install a package if needed. It is taken from [[http://dl.dropboxusercontent.com/u/3968124/sacha-emacs.html#sec-1-3-5][Sacha
Chua's config]].

#+BEGIN_SRC emacs-lisp
  (defun my/package-install (package &optional repository)
    "Install PACKAGE if it has not yet been installed.
  If REPOSITORY is specified, use that."
    (unless (package-installed-p package)
      (let ((package-archives (if repository
                                  (list (assoc repository package-archives))
                                package-archives)))
        (package-install package))))
#+END_SRC

** General configuration

We don't need no stinkin' startup message

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t
        inhibit-startup-echo-area-message t)
#+END_SRC

*** Themes

#+BEGIN_SRC emacs-lisp
  (my/package-install 'solarized-theme)

  (load-theme 'solarized-dark t)
#+END_SRC

*** Misc. packages

**** better-defaults

#+BEGIN_QUOTE
... this package focuses a few changes that have near-universal appeal, lovingly hand-selected by inhabitants of the #emacs channel on Freenode.
#+END_QUOTE

[[https://github.com/technomancy/better-defaults][GitHub Repo]]

#+BEGIN_SRC emacs-lisp
  (my/package-install 'better-defaults)
#+END_SRC

*** Keyboard customizations

#+BEGIN_SRC emacs-lisp
  ;; Remap right alt/option key to 'super' (s-)
  (setq ns-right-option-modifier 'super)

  ;; This is almost alway the intended behavior
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC
*** Backups and intermediate files 

The following will store backups in =~/.emacs.d/backups= instead of in
the same directory as the original. This is particularly important
when using file watchers (such as grunt) that will be triggered
unnecessarily when these files are created or updated.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '((".*" . "~/.emacs.d/backups")))

  (setq delete-old-versions -1)
  (setq version-control t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list" t)))  

  (setq create-lockfiles nil)
#+END_SRC

** Mode/package-specific configuration

*** org-mode

**** TODO Learn org-mode (I suspect this will be a long-lived TODO)

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/submodules/org-mode/lisp")
  (add-to-list 'load-path "~/.emacs.d/submodules/org-mode/contrib/lisp")
    
  (require 'ox-gfm)                       ; Support export to GitHub Flavored Markdown

  (require 'org)
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-cc" 'org-capture)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cb" 'org-iswitchb)
  (setq org-log-done t)

  (setq org-hide-leading-stars t)
#+END_SRC

*** magit

#+BEGIN_SRC emacs-lisp
  (my/package-install 'magit)
#+END_SRC

*** paredit and other lisp helpers

  * [[http://mumble.net/~campbell/emacs/paredit.html][Paredit Keystrokes]]

**** TODO Add paredit keystrokes to Anki

#+BEGIN_SRC emacs-lisp
  (my/package-install 'paredit)

  (my/package-install 'rainbow-delimiters)

  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+END_SRC

*** Clojure
    
***** TODO Add clojure-mode, clojure-test-mode, clj-refactor, and cider keystrokes to Anki

#+BEGIN_SRC emacs-lisp
  (my/package-install 'clojure-mode)
  (my/package-install 'clojure-test-mode)
  (my/package-install 'cider)
  (my/package-install 'clj-refactor)

  (add-hook 'cider-repl-mode-hook 'paredit-mode)
  (add-hook 'cider-repl-mode-hook 'rainbow-delimiters-mode)

  (add-hook 'clojure-mode-hook 'paredit-mode)

  (require 'clj-refactor)

  (setq cljr-sort-comparator 'cljr-semantic-comparator)

  (add-hook 'clojure-mode-hook (lambda ()
                                 (clj-refactor-mode 1)
                                 (cljr-add-keybindings-with-prefix "C-c C-m")))
#+END_SRC

*** Coffeescript

#+BEGIN_SRC emacs-lisp
  (my/package-install 'coffee-mode)

  (setq coffee-tab-width 2)
  (setq coffee-args-compile '("-c" "--bare"))

  (add-hook 'coffee-mode-hook 'whitespace-mode)
#+END_SRC

*** Projectile

#+BEGIN_SRC emacs-lisp
  (my/package-install 'projectile)

  (projectile-global-mode)
#+END_SRC

*** Whitespace

#+BEGIN_SRC emacs-lisp
  (setq whitespace-action '(auto-cleanup))

  (setq whitespace-style '(trailing space-before-tab indentation empty space-after-tab))
#+END_SRC
