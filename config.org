#+TITLE: Matt Dean's Emacs configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: content

Note: Due to some unknown (to me) issue, org-mode needs to be reloaded
via =M-x org-reload= after starting Emacs

* TODO Document this a bit better -- was mostly copied/pasted from existing init.el
  :PROPERTIES:
  :ID:       0C2E9DAA-A944-4D23-BBF1-B1B54840AB1C
  :END:

* Configuration
** About this configuration
   
   This configuration is inspired by the [[http://dl.dropboxusercontent.com/u/3968124/sacha-emacs.html#sec-1][Sacha Chua's literate config
   file]] and is partially an exploration into the idea of literate
   programming, particularly via org-mode.

** Emacs initialization

Load common package archives.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '())             ; Start fresh
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
  
  (when (not package-archive-contents)
    (package-refresh-contents))
#+END_SRC

*** Helper functions

The following function will install a package if needed. It is taken from [[http://dl.dropboxusercontent.com/u/3968124/sacha-emacs.html#sec-1-3-5][Sacha
Chua's config]].

#+BEGIN_SRC emacs-lisp
  (defun my/package-install (package &optional repository)
    "Install PACKAGE if it has not yet been installed.
  If REPOSITORY is specified, use that."
    (unless (package-installed-p package)
      (let ((package-archives (if repository
                                  (list (assoc repository package-archives))
                                package-archives)))
        (package-install package))))
#+END_SRC

** General configuration

We don't need no stinkin' startup message

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t
        inhibit-startup-echo-area-message t)
#+END_SRC

Make sure our exec-path is set up correctly

#+BEGIN_SRC emacs-lisp
  (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
  (setq exec-path (append exec-path '("/usr/local/bin")))

#+END_SRC

*** Themes

#+BEGIN_SRC emacs-lisp
  (my/package-install 'solarized-theme)

  ;; (set-face-attribute 'default nil
  ;;                     :family "Inconsolata" :height 130)

  (set-face-attribute 'default nil
                      :family "Menlo" :height 130)

  (load-theme 'solarized-dark t)
#+END_SRC

*** Misc. packages

**** better-defaults

#+BEGIN_QUOTE
... this package focuses a few changes that have near-universal appeal, lovingly hand-selected by inhabitants of the #emacs channel on Freenode.
#+END_QUOTE

[[https://github.com/technomancy/better-defaults][GitHub Repo]]

#+BEGIN_SRC emacs-lisp
  ;; (my/package-install 'better-defaults)

  (menu-bar-mode -1)
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))

  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))

  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  (require 'saveplace)
  (setq-default save-place t)

  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "C-x C-b") 'helm-buffers-list)

  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)

  (show-paren-mode 1)
  (setq-default indent-tabs-mode nil)
  (setq x-select-enable-clipboard t
        x-select-enable-primary t
        save-interprogram-paste-before-kill t
        apropos-do-all t
        mouse-yank-at-point t
        save-place-file (concat user-emacs-directory "places")
        backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups"))))
#+END_SRC

**** Helm

#+BEGIN_SRC emacs-lisp
  (my/package-install 'helm)

  (helm-mode 1)

  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x h") 'helm-mini)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-c <SPC>") 'helm-all-mark-rings)
  (global-set-key (kbd "C-h C-f") 'helm-apropos)

  (setq helm-quick-update t
        helm-boring-file-regexp-list
        '("\\.git$" "\\.hg$" "\\.svn$" "\\.CVS$" "\\._darcs$" "\\.la$" "\\.o$" "\\.i$")
        helm-exit-idle-delay 0.01) ; The default is 0.3, meaning you can't select an item until after 0.3 seconds has passed.

  (add-hook 'eshell-mode-hook
            #'(lambda ()
                (define-key eshell-mode-map [remap pcomplete] 'helm-esh-pcomplete)
                (local-set-key (kbd "M-r") 'helm-eshell-history)))

#+END_SRC

[[https://github.com/emacs-helm/helm][GitHub repo]]
[[https://github.com/emacs-helm/helm/wiki][Wiki]]
[[http://emacs-helm.github.io/helm/][Site]]
[[http://tuhdo.github.io/helm-intro.html][Tutorial]]

Example uses:

  * http://blog.jenkster.com/2013/10/finding-files-in-emacs-helm.html
  * http://blog.jenkster.com/2013/10/a-tip-for-navigating-clojure-files-in-emacs.html
  * http://blog.jenkster.com/2013/10/writing-a-spotify-client-in-16-minutes.html

**** Silver Searcher

#+BEGIN_SRC emacs-lisp
  (my/package-install 'ag)
#+END_SRC

**** Company-mode

[[http://company-mode.github.io/][Website]]

#+BEGIN_SRC emacs-lisp
  (my/package-install 'company)
  (my/package-install 'company-cider)

  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

**** SASS

#+BEGIN_SRC emacs-lisp
  (my/package-install 'sass-mode)
  (my/package-install 'scss-mode)
#+END_SRC

**** flx

#+BEGIN_SRC emacs-lisp
  (my/package-install 'flx)
  ; (my/package-install 'flx-ido)
#+END_SRC
*** Keyboard customizations

#+BEGIN_SRC emacs-lisp
  ;; Remap right alt/option key to 'super' (s-)
  (setq ns-right-option-modifier 'super)

  ;; This is almost alway the intended behavior
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC
*** Backups and intermediate files 

The following will store backups in =~/.emacs.d/backups= instead of in
the same directory as the original. This is particularly important
when using file watchers (such as grunt) that will be triggered
unnecessarily when these files are created or updated.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '((".*" . "~/.emacs.d/backups")))

  (setq delete-old-versions -1)
  (setq version-control t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list" t)))  

  (setq create-lockfiles nil)
#+END_SRC

** Mode/package-specific configuration

*** org-mode

#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'load-path "~/.emacs.d/submodules/org-mode/lisp")
  ;; (add-to-list 'load-path "~/.emacs.d/submodules/org-mode/contrib/lisp")
    
  ;; Support export to GitHub Flavored Markdown
  ;; (require 'ox-gfm)

  (require 'org)
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-cc" 'org-capture)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cb" 'org-iswitchb)
  (define-key global-map "\C-c\C-x\C-o" 'org-clock-out)
  (define-key global-map "\C-c\C-x\C-x" 'org-clock-in-last)
  (setq org-log-done t
        org-enforce-todo-dependencies t
        org-log-done 'note
        org-log-redeadline 'note
        org-log-reschedule 'note
        org-todo-keywords '((sequence "TODO(t)" "IN PROGRESS(i)" "WAIT(w@/!)" "DELEGATED(o@/!)" "|" "DONE(d!)" "CANCELED(c@)"))
        org-log-into-drawer t
        org-hierarchical-todo-statistics t
        org-log-note-clock-out t
        org-clock-idle-time 5
        org-startup-indented t
        org-catch-invisible-edits 'smart)

  (setq org-todo-keyword-faces
        '(("IN PROGRESS" . "green")))

  (add-hook 'org-mode-hook 'auto-fill-mode)

  (setq org-agenda-files (list "~/org/work.org"
                               "~/org/personal.org"
                               "~/.emacs.d/mattdean.org"))

  (setq org-columns-default-format "%40ITEM(Task) %17Effort(Estimated Effort){:} %CLOCKSUM(Clock)")

  (setq org-hide-leading-stars nil) ; Going back and forth on this one

  (setq org-default-notes-file (concat org-directory "/work.org"))
  (define-key global-map "\C-cc" 'org-capture)

  (setq org-modules (append org-modules '(org-habit)))

  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/org/work.org" "General Tasks")
               "* TODO %?\n  %i\n  %a")
          ("j" "Journal" entry (file+datetree "~/org/personal.org")
               "* %?\nEntered on %U\n  %i\n  %a")
          ("p" "Personal Task" entry (file+headline "~/org/personal.org" "Tasks")
               "* TODO %?\n  %i\n  %a")
          ("c" "Log to the clocked item" item (clock)
           "%?\n  %i\n  %a")))

  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))

  (setq org-refile-use-outline-path nil
        org-refile-allow-creating-parent-nodes 'confirm
        org-refile-use-outline-path nil
        org-refile-use-cache nil
        org-blank-before-new-entry '((heading . auto)
                                    (plain-list-item . auto)))

  (defun my/org-refile-within-current-buffer ()
    "Move the entry at point to another heading in the current buffer."
    (interactive)
    (let ((org-refile-targets '((nil :maxlevel . 5))))
      (org-refile)))

  (setq org-mobile-inbox-for-pull "~/org/flagged.org")
  (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")

#+END_SRC

*** magit


#+BEGIN_SRC emacs-lisp
  (my/package-install 'magit)

  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

*** gist

#+BEGIN_SRC emacs-lisp
  (my/package-install 'gist)
#+END_SRC
*** paredit and other lisp helpers

  * [[http://mumble.net/~campbell/emacs/paredit.html][Paredit Keystrokes]]

**** TODO Add paredit keystrokes to Anki
     :PROPERTIES:
     :ID:       370CEEE4-BFAB-438F-8C72-70C215B4FC1A
     :END:

#+BEGIN_SRC emacs-lisp
  (my/package-install 'paredit)

  (my/package-install 'rainbow-delimiters)

  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
#+END_SRC

**** TODO Improve Anki cards related to items such as forward-list.
     :PROPERTIES:
     :ID:       DAD8B90D-44C5-47F9-BE34-9259D8463B64
     :END:

Perhaps add ascii graphics indicating the cursor position before and
after the keystrokes.

**** TODO Determine whether it's possible to have projectile include submodules
:PROPERTIES:
:ID:       8FC5EF93-CAC9-474C-A5F9-9CCA4841E958
:END:
*** Clojure

Note: Stuart Sierra published [[https://github.com/stuartsierra/dotfiles/blob/139083393bf4e2025b15a50737971fdf423a9a23/.emacs.d/local/init.el#L313][his emacs config]] for combining org-mode,
babel, and Clojure. May want to take a look at it if the default setup
doesn't work as expected.
    
**** TODO Add clojure-mode, clojure-test-mode, clj-refactor, and cider keystrokes to Anki
      :PROPERTIES:
      :ID:       920AA2A6-929A-48C2-B214-345D1C0C941F
      :END:

#+BEGIN_SRC emacs-lisp
  (my/package-install 'clojure-mode)
  (my/package-install 'cider)
  (my/package-install 'clj-refactor)
  (my/package-install 'midje-mode)

  (add-hook 'cider-repl-mode-hook 'paredit-mode)
  (add-hook 'cider-repl-mode-hook 'rainbow-delimiters-mode)

  (add-hook 'clojure-mode-hook 'paredit-mode)

  (require 'clj-refactor)

  (setq cljr-sort-comparator 'cljr-semantic-comparator)

  (add-hook 'clojure-mode-hook (lambda ()
                                 (clj-refactor-mode 1)
                                 (cljr-add-keybindings-with-prefix "C-c C-m")))

  (require 'midje-mode)
  (add-hook 'clojure-mode-hook 'midje-mode)
#+END_SRC

*** Coffeescript

#+BEGIN_SRC emacs-lisp
  (my/package-install 'coffee-mode)

  (setq coffee-tab-width 2)
  (setq coffee-args-compile '("-c" "--bare"))

  (add-hook 'coffee-mode-hook 'whitespace-mode)
#+END_SRC

*** Projectile

#+BEGIN_SRC emacs-lisp
  (my/package-install 'projectile)

  (projectile-global-mode)

  (my/package-install 'helm-projectile)

  (global-set-key (kbd "C-c h") 'helm-projectile)
#+END_SRC

*** Whitespace

#+BEGIN_SRC emacs-lisp
  (setq whitespace-action '(auto-cleanup))

  (setq whitespace-style '(trailing space-before-tab indentation empty space-after-tab))
#+END_SRC
